#!/usr/bin/python3

import os
import subprocess


# ANSI color codes
RESET = "\033[0m"
RED = "\033[31m"
GREEN = "\033[32m"
YELLOW = "\033[33m"
BLUE = "\033[34m"
CYAN = "\033[36m"
MAGENTA = "\033[35m"

def color_text(text, color):
    return f"{color}{text}{RESET}"


def get_git_info(repo_path):
    try:
        # Get the current branch name
        branch = subprocess.check_output(
            ['git', '-C', repo_path, 'rev-parse', '--abbrev-ref', 'HEAD'],
            text=True,
            stderr=subprocess.DEVNULL
        ).strip()

        # Get ahead/behind information
        # grab name of default branch on origin
        grso = subprocess.Popen(
            ['git', '-C', repo_path, 'remote', 'show', 'origin'],
            stdout=subprocess.PIPE
        )
        default_remote_branch = subprocess.check_output(['sed', '-n', '/HEAD branch/s/.*: //p'], stdin=grso.stdout,text=True).strip()
        
        # check ahead / behind compared to remote origin
        upstream_status = subprocess.check_output(
            ['git', '-C', repo_path, 'rev-list', '--left-right', '--count', f'origin/{default_remote_branch}...HEAD'],
            text=True,
            stderr=subprocess.DEVNULL
        ).strip()
        # Format ahead/behind
        # ahead, behind = 0, 0
        # if upstream_status.startswith('[ahead'):
        #     parts = upstream_status.strip('[]').split(',')
        #     for part in parts:
        #         if 'ahead' in part:
        #             ahead = int(part.split()[1])
        #         elif 'behind' in part:
        #             behind = int(part.split()[1])
        ahead = int(upstream_status.split('\t')[1].strip())
        behind = int(upstream_status.split('\t')[0].strip())


        # Check for uncommitted changes
        # uncommitted_changes = subprocess.check_output(
        #     ['git', '-C', repo_path, 'status', '--porcelain'],
        #     text=True
        # )
        # uncommitted_count = len(uncommitted_changes.splitlines())

        # Check for staged, unstaged, and untracked changes
        status_output = subprocess.check_output(
            ['git', '-C', repo_path, 'status', '--porcelain=2'],
            text=True
        ).splitlines()

        staged_count = sum(1 for line in status_output if line.startswith("1 "))
        unstaged_count = sum(1 for line in status_output if line.startswith("2 "))
        untracked_count = sum(1 for line in status_output if line.startswith("? "))



        last_commit = subprocess.check_output(
            ['git', '-C', repo_path, 'log', '-1', '--format=%cd', '--date=iso'],
            text=True
        ).strip()

        return {
            'branch': branch,
            'ahead': ahead,
            'behind': behind,
            'staged_count': staged_count,
            'unstaged_count': unstaged_count,
            'untracked_count': untracked_count,
            'last_commit': last_commit
        }
    except subprocess.CalledProcessError:
        return None


def main(directory):
    # get sort order for 
    repos = []
    for item in os.listdir(directory):
        repo_path = os.path.join(directory, item)
        if os.path.isdir(repo_path) and os.path.isdir(os.path.join(repo_path, '.git')):
            try:
                date = subprocess.check_output(['git', '-C', repo_path, 'log', '-1', '--format=%cd', '--date=iso'],text=True,stderr=subprocess.DEVNULL).strip()
                repos.append((item, repo_path, date))
            except subprocess.CalledProcessError:
                continue
    
    repos.sort(key=lambda r: r[2], reverse=True)

    for item, repo_path, _ in repos:
        info = get_git_info(repo_path)
        repo_name = color_text(item, BLUE)
        if info:
            # Build concise status output with colors
            # repo_name = color_text(item, BLUE)
            branch = color_text(info['branch'], GREEN)
            ahead_behind = ""
            ahead_color = GREEN if info['ahead'] > 0 else RESET
            behind_color = RED if info['behind'] > 0 else RESET
            ahead_behind = (
                " "+color_text(f"+{info['ahead']}", ahead_color)+
                "/"+color_text(f"-{info['behind']}", behind_color)
            )

            staged = color_text(f"+{info['staged_count']}" if info['staged_count'] > 0 else "  ", YELLOW)
            unstaged = color_text(f"?{info['unstaged_count']}" if info['unstaged_count'] > 0 else "  ", BLUE)
            untracked = color_text(f"!{info['untracked_count']}" if info['untracked_count'] > 0 else "  ", RED)

            # Combine staged, unstaged, and untracked indicators
            uncommitted = f" {staged}{unstaged}{untracked}"

            # Combine and print
            print(f"{repo_name:<40}: {branch:<30} {ahead_behind:<20} {uncommitted:<35} {info['last_commit']:<16}")
        else:
            print(f"{repo_name:<40}: No commits")


if __name__ == "__main__":
    directory = os.getcwd()  # Default to the current working directory
    if len(os.sys.argv) > 1:
        directory = os.sys.argv[1]
    if os.path.isdir(directory):
        main(directory)
    else:
        print(color_text("The provided directory does not exist.", RED))